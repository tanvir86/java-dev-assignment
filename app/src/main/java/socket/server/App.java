/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class App {
    private static final int PORT = 9876;
    /**
     * Pool of worker threads of unbounded size. A new thread will be created
     * for each concurrent connection, and old threads will be shut down if they
     * remain unused for about 1 minute.
     */
    private final ExecutorService workers = Executors.newCachedThreadPool();

    public static volatile boolean keepListening = true;

    public void startServerAndAcceptRequest() throws IOException {
        ServerSocket server = new ServerSocket(PORT);
        System.out.println("Starting socket server");

        while (this.keepListening) {
            System.out.println("Waiting for the client request");
            Socket socket = server.accept();
            ClientHandler clientHandler = new ClientHandler(socket);
            this.workers.execute(clientHandler);
        }
        System.out.println("Shutting down socket server");
        server.close();
    }


    public static void main(String[] args) throws IOException {
        new App().startServerAndAcceptRequest();
    }
}
