/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server;

import org.junit.jupiter.api.AfterEach;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.net.InetAddress;
import java.net.Socket;

class AppTest {
    InetAddress host;
    private static final int PORT = 9876;

    @BeforeEach
    void initialize() throws IOException {
        Runnable runnable = () -> {
            new App().startServerAndAcceptRequest();
        };
        Thread serverThread = new Thread(runnable);
        serverThread.start();
        host = InetAddress.getLocalHost();
    }

    @Test
    void sendRequest() throws IOException, ClassNotFoundException, InterruptedException {
        for (int i = 0; i < 5; i++) {
            // opening new socket for every request here. we can also send multiple requests with one socket.
            Socket socket = new Socket(host.getHostName(), PORT);
            ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
            objectOutputStream.writeObject("request # " + i);
            ObjectInputStream objectInputStream = new ObjectInputStream(socket.getInputStream());
            String message = (String) objectInputStream.readObject();
            System.out.println("Message from server: " + message);
            objectOutputStream.close();
            objectInputStream.close();
            socket.close();
            Thread.sleep(100);
        }
    }

    @AfterEach
    void cleanup() throws IOException, InterruptedException {
        Socket socket = new Socket(host.getHostName(), PORT);
        ObjectOutputStream objectOutputStream = new ObjectOutputStream(socket.getOutputStream());
        objectOutputStream.writeObject("EXIT");
        Thread.sleep(100);
        objectOutputStream.close();
        socket.close();
    }
}
