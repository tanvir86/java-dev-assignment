/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package socket.server;

import java.io.IOException;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;

public class App {
    private static final int PORT = 9876;
    /**
     * Pool of worker threads of unbounded size. A new thread will be created
     * for each concurrent connection, and old threads will be shut down if they
     * remain unused for about 1 minute.
     */
    private final ExecutorService workers = Executors.newCachedThreadPool();

    public static volatile boolean keepListening = true;

    private ServerSocket server;

    public void startServerAndAcceptRequest() {
        this.startServer();

        while (this.keepListening) {
            System.out.println("Waiting for the client request");
            try{
                Socket socket = this.server.accept();
                ClientHandler clientHandler = new ClientHandler(socket);
                this.workers.execute(clientHandler);
            } catch (IOException ioException){
                System.out.println(ioException.getClass());
            }

        }

        this.closeServer();
    }

    private void startServer(){
        try {
            this.server = new ServerSocket(PORT);
        } catch (IOException ioException){
            System.err.println("Unable to open port "+ PORT + ". Check whether port already in use by other apps");
            ioException.printStackTrace();
            System.exit(1);
        } catch (IllegalArgumentException illegalArgumentException) {
            System.err.println("Given port number is not valid. Acceptable port number range (0,65535]");
            illegalArgumentException.printStackTrace();
            System.exit(1);
        }
    }

    private void closeServer(){
        try{
            System.out.println("Shutting down socket server");
            this.server.close();
        } catch (IOException ioException){
            // Ignore, we are closing the application anyway
        }
    }

    public static void main(String[] args){
        new App().startServerAndAcceptRequest();
    }
}
